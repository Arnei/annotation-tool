<?xml version="1.0" encoding="utf-8"?>
<project name="Annotations tool" default="" basedir="../">

    <!--******** PROPERTIES ********-->

        <!-- properties files -->
        <loadproperties srcfile="build/config/project.properties" />

        <!-- License -->
        <loadfile property="license" srcfile="LICENSE" />
        <loadfile property="jsbuild" srcfile="${js.build}" />

        <tstamp>
            <format property="build.time"
                    pattern="MMMM d, yyyy hh:mm:ss"
                    locale="en,US"/> 
        </tstamp>
        
    <!--******** CUSTOM TASKS ********-->

        <taskdef name="jshint" classname="com.philmander.jshint.JsHintAntTask" 
        classpath="${tools.dir}/ant-jshint-0.3.3-deps.jar" />

    <!--******** TARGETS ********-->

    <!-- JSHint -->
        <property name="log.file" value="${basedir}/build/logs/jshint-results-${build.time}.xml" />
        
        <target name="validate-all">
            <jshint dir="${src.dir}" optionsFile="${jshint.properties}" globalsFile="${jshint.globals}">
                    <include name="**/*.js" />
                    <exclude name="libs/*" />
                    <report type="xml" destFile="${log.file}" />
            </jshint>
        </target>

        <target name="validate-one">
            <jshint dir="${basedir}" optionsFile="${jshint.properties}" globalsFile="${jshint.globals}">
             <include name="${targetFile}"/>
            </jshint>
        </target>

    <!-- License -->
        <target name="license" depends="" >
            <concat destfile="${basedir}/test-${build.time}.js" fixlastline="yes" eol="lf">
                <header trimleading="yes">/*!
                ${license}
                */
               
                /* 
                    Version: ${version}
                    Build time: ${build.time} 
                */
                </header>
                <filelist dir="${basedir}" files="index.html" />
            </concat>
        </target>

    <!-- Versionning -->
        <target name="version">
            <echo message="Add version number: ${version}"/>
            <replaceregexp match="@VERSION@" replace="${version}" flags="g" byline="true">
                <filelist dir="${targetdir}" files="index.html"/>
            </replaceregexp>

            <!--<replaceregexp match="@BUILDTIME@" replace="${build.time}" flags="g" byline="true">
                <fileset dir="${src.dir}" includes="**/*"/>
            </replaceregexp> -->
        </target>

    <!-- Tests -->
        <target name="tests">
            <echo message="UNIT TESTS: Backone models"/>
            <exec executable="phantomjs" failonerror="true"> 
                <arg path="${phantomjs.driver}"/>
                <arg path="${tests.dir}/models.html"/>
            </exec>

            <echo message="UNIT TESTS: Backone collections"/>
            <exec executable="phantomjs" failonerror="true"> 
                <arg path="${phantomjs.driver}"/>
                <arg path="${tests.dir}/collections.html"/>
            </exec> 
        </target>

    <!-- Less -->
        <target name="less" description="Convert LESS to CSS then concatenate and Minify any stylesheets">

                <echo message="Converting LESS to CSS..."/>
                <!-- Clear the former compiled css files -->
              <delete includeemptydirs="true">
                    <fileset dir="${css.dir}" includes="*.css, **/*.css" excludes="*qunit.css, *colorpicker.css, *timeline/timeline.css" defaultexcludes="false"/>
              </delete>

              <apply dir="${css.dir}" executable="java" parallel="false" failonerror="true">
                    <!-- Give the input bundle of less files-->
                  <fileset dir="${css.dir}">
                      <include name="*.less"/>
                  </fileset>
                  <arg value="-jar" />
                  <arg path="${rhino.jar}" />
                  <arg path="${less-rhino}" />
                  <srcfile/>
                    <!-- Output the compiled css file with corresponding name -->
                  <mapper type="glob" from="*.less" to="${css.dir}/*.css"/>
                  <targetfile/>
              </apply>

        </target>

    <!-- Deploy -->
        <target name="deploy-local" depends="less">
            <loadfile property="videosource" srcfile="${deploy.local.video}" />
            <delete file="${deploy.local.dest}/index.html" quiet="true"/>

            <echo message="Deploy file locally to ${deploy.local.dest}"/>
            <copy todir="${deploy.local.dest}" overwrite="true">
                <fileset dir="${deploy.local.src}">
                    <exclude name="*build/" />
                    <exclude name="*.git" />
                    <exclude name="*docs/" />
                </fileset>
            </copy>

            <echo message="Add source for video element"/>
            <replaceregexp match="@SOURCE@" replace="${videosource}" flags="g" byline="true">
                <filelist dir="${deploy.local.dest}" files="index.html"/>
            </replaceregexp>

            <antcall target="version">
                <param name="targetdir" value="${deploy.local.dest}" />
            </antcall>  
        </target>

        <target name="deploy-integration" depends="less">
            <loadfile property="videosource" srcfile="${deploy.integration.video}" />
            <delete file="${deploy.integration.dest}/index.html" quiet="true"/>

            <echo message="Deploy file for integration to ${deploy.integration.dest}"/>
            <copy todir="${deploy.integration.dest}" overwrite="true">
                <fileset dir="${deploy.integration.src}">
                    <!--<exclude name="*build/" />-->
                    <exclude name="*.git" />
                    <exclude name="*docs/" />
                </fileset>
            </copy>

            <copy file="${deploy.integration.dir}/annotations-tool-configuration.js" todir="${deploy.integration.dest}/js" overwrite="true"/>
            <copy file="${deploy.integration.dir}/annotations-tool-configuration.js" todir="${deploy.integration.dest}/tests/js" overwrite="true"/>
            <copy file="${deploy.integration.dir}/annotations-tool.js" todir="${deploy.integration.dest}/js" overwrite="true"/>

            <echo message="Add source for video element"/>
            <replaceregexp match="@SOURCE@" replace="${videosource}" flags="g" byline="true">
                <filelist dir="${deploy.integration.dest}" files="index.html"/>
            </replaceregexp>

            <antcall target="version">
                <param name="targetdir" value="${deploy.integration.dest}" />
            </antcall>  
        </target>

    <!-- JS Doc -->
        <target name="jsdoc3" description="(PRIVATE) Publishes documentation">
            <!-- Delete any existing docs directory -->
            <echo message="Deleting previous documentation"/>
            <delete dir="./${dir.docs}/"/>

            <echo message="Building documentation"/>
            <apply executable="java" parallel="false" dir="${dir.jsdoc}">
                <!-- Include our JS directory, but exclude libs -->
                <dirset dir="${src.dir}" excludes="libs"></dirset>
                <arg line="-classpath"/>
                <arg path="${dir.jsdoc}/lib/js.jar"/>
                <arg value="org.mozilla.javascript.tools.shell.Main"/>
                <arg line="-modules" />
                <arg value="node_modules"/>
                <arg line="-modules" />
                <arg value="rhino_modules"/>
                <arg path="${dir.jsdoc}/${tool.jsdoc3}"/>
                <arg line="${tool.jsdoc3.opts}" />
                <!-- we're in jsdoc here, so back up to the root directory -->
                <arg line="--destination"/>
                <arg value="../../../${dir.docs}"/>
            </apply>

        </target>
        
    <!-- Require JS optimisation -->
        <target name="-optimize" description="Combine and minify files.">
            <java classname="org.mozilla.javascript.tools.shell.Main">
                <classpath>
                    <pathelement location="${rhino.jar}" />
                    <pathelement location="${closure.jar}" />
                </classpath>
                <arg value="${r.js}"/>
                <arg value="-o"/>
                <arg value="${requirejs.optimizer.settings}" />
            </java>
            <echo message="optimized ${requirejs.optimizer.settings}" />
        </target>
        
        <target name="optimizeJS">
            <echo message="Combining and minifying JS files." />
            <antcall target="-optimize">
                <param name="requirejs.optimizer.settings" value="${js.build}" />
            </antcall>  
        </target>
    
</project>