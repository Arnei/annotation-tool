<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="17" tokens="255">
      <file line="910"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1380"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[  private Response getScalesResponse(final Option<Long> videoId, final int limit, final int offset, final String date,
          final String tagsAnd, final String tagsOr) {
    return run(nil, new Function0<Response>() {
      @Override
      public Response apply() {
        final Option<Integer> offsetm = offset > 0 ? some(offset) : Option.<Integer> none();
        final Option<Integer> limitm = limit > 0 ? some(limit) : Option.<Integer> none();
        final Option<Option<Date>> datem = trimToNone(date).map(parseDate);
        final Option<Option<Map<String, String>>> tagsAndArray = trimToNone(tagsAnd).map(parseToJsonMap);
        final Option<Option<Map<String, String>>> tagsOrArray = trimToNone(tagsOr).map(parseToJsonMap);

        if (datem.isSome() && datem.get().isNone() || (videoId.isSome() && eas().getVideo(videoId.get()).isNone())
                || (tagsAndArray.isSome() && tagsAndArray.get().isNone())
                || (tagsOrArray.isSome() && tagsOrArray.get().isNone())) {
          return BAD_REQUEST;
        } else {
          return buildOk.apply(ScaleDto.toJson(]]></codefragment>
   </duplication>
   <duplication lines="12" tokens="160">
      <file line="910"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1126"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1380"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[  private Response getScalesResponse(final Option<Long> videoId, final int limit, final int offset, final String date,
          final String tagsAnd, final String tagsOr) {
    return run(nil, new Function0<Response>() {
      @Override
      public Response apply() {
        final Option<Integer> offsetm = offset > 0 ? some(offset) : Option.<Integer> none();
        final Option<Integer> limitm = limit > 0 ? some(limit) : Option.<Integer> none();
        final Option<Option<Date>> datem = trimToNone(date).map(parseDate);
        final Option<Option<Map<String, String>>> tagsAndArray = trimToNone(tagsAnd).map(parseToJsonMap);
        final Option<Option<Map<String, String>>> tagsOrArray = trimToNone(tagsOr).map(parseToJsonMap);

        if (datem.isSome() && datem.get().isNone() || (videoId.isSome() && eas().getVideo(videoId.get()).isNone())]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="144">
      <file line="525"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1127"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[          @QueryParam("tags-and") final String tagsAnd, @QueryParam("tags-or") final String tagsOr) {
    return run(nil, new Function0<Response>() {
      @Override
      public Response apply() {
        final Option<Integer> offsetm = offset > 0 ? some(offset) : Option.<Integer> none();
        final Option<Integer> limitm = limit > 0 ? some(limit) : Option.<Integer> none();
        final Option<Option<Date>> datem = trimToNone(date).map(parseDate);
        final Option<Option<Map<String, String>>> tagsAndArray = trimToNone(tagsAnd).map(parseToJsonMap);
        final Option<Option<Map<String, String>>> tagsOrArray = trimToNone(tagsOr).map(parseToJsonMap);

        if ((datem.isSome() && datem.get().isNone()) || eas().getVideo(videoId).isNone()]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="143">
      <file line="525"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="911"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1381"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[          @QueryParam("tags-and") final String tagsAnd, @QueryParam("tags-or") final String tagsOr) {
    return run(nil, new Function0<Response>() {
      @Override
      public Response apply() {
        final Option<Integer> offsetm = offset > 0 ? some(offset) : Option.<Integer> none();
        final Option<Integer> limitm = limit > 0 ? some(limit) : Option.<Integer> none();
        final Option<Option<Date>> datem = trimToNone(date).map(parseDate);
        final Option<Option<Map<String, String>>> tagsAndArray = trimToNone(tagsAnd).map(parseToJsonMap);
        final Option<Option<Map<String, String>>> tagsOrArray = trimToNone(tagsOr).map(parseToJsonMap);

        if ((datem.isSome() && datem.get().isNone()) || eas().getVideo(videoId).isNone()]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="139">
      <file line="1605"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1815"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[          final int offset, final String date, final String tagsAnd, final String tagsOr) {
    return run(nil, new Function0<Response>() {
      @Override
      public Response apply() {
        final Option<Integer> offsetm = offset > 0 ? some(offset) : Option.<Integer> none();
        final Option<Integer> limitm = limit > 0 ? some(limit) : Option.<Integer> none();
        final Option<Option<Date>> datem = trimToNone(date).map(parseDate);
        Option<Option<Map<String, String>>> tagsAndArray = trimToNone(tagsAnd).map(parseToJsonMap);
        Option<Option<Map<String, String>>> tagsOrArray = trimToNone(tagsOr).map(parseToJsonMap);

        if ((videoId.isSome() && eas().getVideo(videoId.get()).isNone())]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="138">
      <file line="814"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1282"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[  private Response updateScale(final Option<Long> videoId, final long id, final String name, final String description,
          final String tags) {
    return run(array(name), new Function0<Response>() {
      @Override
      public Response apply() {
        Option<Option<Map<String, String>>> tagsMap = trimToNone(tags).map(parseToJsonMap);
        if ((videoId.isSome() && eas().getVideo(videoId.get()).isNone())
                || (tagsMap.isSome() && tagsMap.get().isNone()))
          return BAD_REQUEST;

        final Option<Map<String, String>> tags = tagsMap.bind(Functions.<Option<Map<String, String>>> identity());

        return eas().getScale(id, false).fold(new Option.Match<Scale, Response>() {]]></codefragment>
   </duplication>
   <duplication lines="7" tokens="135">
      <file line="529"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="721"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[        final Option<Integer> offsetm = offset > 0 ? some(offset) : Option.<Integer> none();
        final Option<Integer> limitm = limit > 0 ? some(limit) : Option.<Integer> none();
        final Option<Option<Date>> datem = trimToNone(date).map(parseDate);
        final Option<Option<Map<String, String>>> tagsAndArray = trimToNone(tagsAnd).map(parseToJsonMap);
        final Option<Option<Map<String, String>>> tagsOrArray = trimToNone(tagsOr).map(parseToJsonMap);

        if ((datem.isSome() && datem.get().isNone()) || eas().getVideo(videoId).isNone()]]></codefragment>
   </duplication>
   <duplication lines="12" tokens="133">
      <file line="779"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1239"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[  private Response createScale(final Option<Long> videoId, final String name, final String description,
          final String tags) {
    return run(array(name), new Function0<Response>() {
      @Override
      public Response apply() {
        final Option<Option<Map<String, String>>> tagsMap = trimToNone(tags).map(parseToJsonMap);
        if ((videoId.isSome() && eas().getVideo(videoId.get()).isNone())
                || (tagsMap.isSome() && tagsMap.get().isNone()))
          return BAD_REQUEST;

        Resource resource = eas().createResource(tagsMap.bind(Functions.<Option<Map<String, String>>> identity()));
        final Scale scale = eas().createScale(videoId, name, trimToNone(description), resource);]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="133">
      <file line="1561"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1644"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[  private Response getLabelResponse(final Option<Long> videoId, final long categoryId, final long id) {
    if ((videoId.isSome() && eas().getVideo(videoId.get()).isNone()) || eas().getCategory(categoryId, false).isNone())
      return BAD_REQUEST;

    return run(nil, new Function0<Response>() {
      @Override
      public Response apply() {
        return eas().getLabel(id, false).fold(new Option.Match<Label, Response>() {
          @Override
          public Response some(Label l) {
            if (!eas().hasResourceAccess(l))
              return UNAUTHORIZED;
            return buildOk.apply(LabelDto.toJson.apply(eas(), l));]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="131">
      <file line="1083"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1165"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[  private Response getScaleValueResponse(final Option<Long> videoId, final long scaleId, final long id) {
    if ((videoId.isSome() && eas().getVideo(videoId.get()).isNone()) || eas().getScale(scaleId, false).isNone())
      return BAD_REQUEST;

    return run(nil, new Function0<Response>() {
      @Override
      public Response apply() {
        return eas().getScaleValue(id).fold(new Option.Match<ScaleValue, Response>() {
          @Override
          public Response some(ScaleValue s) {
            if (!eas().hasResourceAccess(s))
              return UNAUTHORIZED;
            return buildOk.apply(ScaleValueDto.toJson.apply(eas(), s));]]></codefragment>
   </duplication>
   <duplication lines="10" tokens="130">
      <file line="1672"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1700"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[          @PathParam("annotationId") final long annotationId, @FormParam("text") final String text,
          @FormParam("tags") final String tags) {
    if (eas().getVideo(videoId).isSome() && eas().getTrack(trackId).isSome()
            && eas().getAnnotation(annotationId).isSome()) {
      return run(array(text), new Function0<Response>() {
        @Override
        public Response apply() {
          final Option<Option<Map<String, String>>> tagsMap = trimToNone(tags).map(parseToJsonMap);
          if (tagsMap.isSome() && tagsMap.get().isNone())
            return BAD_REQUEST;]]></codefragment>
   </duplication>
   <duplication lines="12" tokens="128">
      <file line="650"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="679"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[  public Response deleteAnnotation(@PathParam("videoId") final long videoId, @PathParam("trackId") final long trackId,
          @PathParam("id") final long id) {
    if (eas().getVideo(videoId).isSome() && eas().getTrack(trackId).isSome()) {
      return run(nil, new Function0<Response>() {
        @Override
        public Response apply() {
          return eas().getAnnotation(id).fold(new Option.Match<Annotation, Response>() {
            @Override
            public Response some(Annotation a) {
              if (!eas().hasResourceAccess(a))
                return UNAUTHORIZED;
              return eas().deleteAnnotation(a) ? NO_CONTENT : NOT_FOUND;]]></codefragment>
   </duplication>
   <duplication lines="7" tokens="118">
      <file line="721"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1131"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[          final Option<Integer> offsetm = offset > 0 ? some(offset) : Option.<Integer> none();
          final Option<Integer> limitm = limit > 0 ? some(limit) : Option.<Integer> none();
          final Option<Option<Date>> datem = trimToNone(date).map(parseDate);
          final Option<Option<Map<String, String>>> tagsAndArray = trimToNone(tagsAnd).map(parseToJsonMap);
          final Option<Option<Map<String, String>>> tagsOrArray = trimToNone(tagsOr).map(parseToJsonMap);

          if ((datem.isSome() && datem.get().isNone()) || (tagsAndArray.isSome() && tagsAndArray.get().isNone())]]></codefragment>
   </duplication>
   <duplication lines="7" tokens="117">
      <file line="721"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="915"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1385"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[          final Option<Integer> offsetm = offset > 0 ? some(offset) : Option.<Integer> none();
          final Option<Integer> limitm = limit > 0 ? some(limit) : Option.<Integer> none();
          final Option<Option<Date>> datem = trimToNone(date).map(parseDate);
          final Option<Option<Map<String, String>>> tagsAndArray = trimToNone(tagsAnd).map(parseToJsonMap);
          final Option<Option<Map<String, String>>> tagsOrArray = trimToNone(tagsOr).map(parseToJsonMap);

          if ((datem.isSome() && datem.get().isNone()) || (tagsAndArray.isSome() && tagsAndArray.get().isNone())]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="112">
      <file line="868"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="949"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[  private Response getScaleResponse(final Option<Long> videoId, final long id) {
    if (videoId.isSome() && eas().getVideo(videoId.get()).isNone())
      return BAD_REQUEST;

    return run(nil, new Function0<Response>() {
      @Override
      public Response apply() {
        return eas().getScale(id, false).fold(new Option.Match<Scale, Response>() {
          @Override
          public Response some(Scale s) {
            if (!eas().hasResourceAccess(s))
              return UNAUTHORIZED;
            return buildOk.apply(ScaleDto.toJson.apply(eas(), s));]]></codefragment>
   </duplication>
   <duplication lines="8" tokens="110">
      <file line="910"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1126"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1380"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <file line="1604"
            path="/Users/wunden/Documents/Entwine/Code/matterhorn/source/modules/entwine-annotations-impl/src/main/java/ch/entwine/annotations/endpoint/AbstractExtendedAnnotationsRestService.java"/>
      <codefragment><![CDATA[  private Response getScalesResponse(final Option<Long> videoId, final int limit, final int offset, final String date,
          final String tagsAnd, final String tagsOr) {
    return run(nil, new Function0<Response>() {
      @Override
      public Response apply() {
        final Option<Integer> offsetm = offset > 0 ? some(offset) : Option.<Integer> none();
        final Option<Integer> limitm = limit > 0 ? some(limit) : Option.<Integer> none();
        final Option<Option<Date>> datem = trimToNone(date).map(parseDate);]]></codefragment>
   </duplication>
</pmd-cpd>